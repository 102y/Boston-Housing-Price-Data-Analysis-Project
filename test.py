# -*- coding: utf-8 -*-
"""test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11Io3F8fU-jO7sgtvAdC6w9CvF508lldo
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.ensemble import RandomForestRegressor
import torch
import torch.nn as nn
import torch.optim as optim

# Dosya yolu ve adını belirtin
file_path = "/content/BostonHousing.csv"

# Veri setini yükleyin
boston_df = pd.read_csv(file_path)

# Veri setinin dağılımını gösterin
plt.figure(figsize=(20, 5))

for i, feature in enumerate(boston_df.columns[:-1]):
    plt.subplot(2, 7, i+1)
    plt.scatter(boston_df[feature], boston_df['medv'], marker='o')
    plt.title(feature)
    plt.xlabel(feature)
    plt.ylabel('medv')

plt.tight_layout()
plt.show()

# Veri setini özellikler (X) ve hedef değişken (y) olarak ayırın
X = boston_df.drop('medv', axis=1).values
y = boston_df['medv'].values

# Veriyi %20 test setine ve %80 eğitim setine bölelim
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Özellikleri ölçeklendirelim
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Linear Regression modelini eğitelim
lr_model = LinearRegression()
lr_model.fit(X_train_scaled, y_train)

# SVM modelini eğitelim
svm_model = SVR(kernel='linear')
svm_model.fit(X_train_scaled, y_train)

# Random Forest modelini eğitelim
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train_scaled, y_train)

# ANN modellerini tanımlayalım
class ANN(nn.Module):
    def __init__(self, input_dim):
        super(ANN, self).__init__()
        self.fc1 = nn.Linear(input_dim, 64)
        self.fc2 = nn.Linear(64, 32)
        self.fc3 = nn.Linear(32, 1)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x

class ANN2(nn.Module):
    def __init__(self, input_dim):
        super(ANN2, self).__init__()
        self.fc1 = nn.Linear(input_dim, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 1)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x

# ANN modelini eğitelim
ann_model = ANN(X_train.shape[1])
criterion = nn.MSELoss()
optimizer = optim.Adam(ann_model.parameters(), lr=0.001)

for epoch in range(1000):
    inputs = torch.tensor(X_train_scaled, dtype=torch.float32)
    targets = torch.tensor(y_train, dtype=torch.float32).view(-1, 1)

    optimizer.zero_grad()
    outputs = ann_model(inputs)
    loss = criterion(outputs, targets)
    loss.backward()
    optimizer.step()

# İkinci ANN modelini eğitelim
ann_model2 = ANN2(X_train.shape[1])
optimizer2 = optim.Adam(ann_model2.parameters(), lr=0.001)

for epoch in range(1000):
    inputs = torch.tensor(X_train_scaled, dtype=torch.float32)
    targets = torch.tensor(y_train, dtype=torch.float32).view(-1, 1)

    optimizer2.zero_grad()
    outputs = ann_model2(inputs)
    loss = criterion(outputs, targets)
    loss.backward()
    optimizer2.step()

# Linear Regression, SVM, Random Forest ve ANN modellerini değerlendirelim
lr_score = lr_model.score(X_test_scaled, y_test)
svm_score = svm_model.score(X_test_scaled, y_test)
rf_score = rf_model.score(X_test_scaled, y_test)

inputs = torch.tensor(X_test_scaled, dtype=torch.float32)
targets = torch.tensor(y_test, dtype=torch.float32).view(-1, 1)
ann_outputs = ann_model(inputs)
ann_score = 1 - criterion(ann_outputs, targets).item() / torch.var(targets).item()

ann_outputs2 = ann_model2(inputs)
ann_score2 = 1 - criterion(ann_outputs2, targets).item() / torch.var(targets).item()

print("Linear Regression Score:", lr_score)
print("SVM Score:", svm_score)
print("Random Forest Score:", rf_score)
print("ANN Score (Model 1):", ann_score)
print("ANN Score (Model 2):", ann_score2)